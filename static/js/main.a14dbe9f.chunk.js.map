{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCalsius","main","temp","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Icon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a14dbe9f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst weather = props => {\r\n    return(\r\n     <div className=\"container text-warning\">\r\n        <div className=\"cards pt-4\">\r\n          <h1>{props.city}</h1> \r\n          <h5 className=\"py-4\">\r\n              <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n          </h5> \r\n\r\n          {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>): null}\r\n\r\n          {/* show max and min temp */}\r\n          {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n          <h4 className=\"py-3\">{props.description}</h4>\r\n        </div>\r\n     </div>   \r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n   if(min && max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n   }\r\n}\r\n\r\nexport default weather;\r\n","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error ? error(): null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"city\" \r\n                    autoComplete=\"off\" \r\n                    placeholder=\"city\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"country\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"country\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './App.css';\r\nimport 'weather-icons/css/weather-icons.css';\r\nimport Weather from './app_component/weather.component';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import { render } from '@testing-library/react';\r\nimport Form from './app_component/form.component';\r\n\r\n\r\n// api all api.openweathermap.org/data/2.5/weather?q=London,uk\r\nconst API_key = \"57de46e6eebd17855f92c348aef7147a\";\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country: undefined,\r\n      icon: undefined,\r\n      main: undefined,\r\n      celsius: undefined,\r\n      temp_max: undefined,\r\n      temp_min: undefined,\r\n      description: \"\",\r\n      error: false\r\n    };\r\n    \r\n\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\"\r\n    }\r\n  }\r\n\r\n  calCalsius(temp) {\r\n    let cell = Math.floor(temp - 273.15);\r\n    return cell;\r\n  }\r\n\r\n  get_WeatherIcon(icons, rangeId){\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId <= 232:\r\n        this.setState({icon: this/this.weatherIcon.Thunderstorm});\r\n        break;\r\n      case rangeId >= 300 && rangeId <= 331:\r\n        this.setState({icon: this.weatherIcon.Drizzle});\r\n        break;\r\n      case rangeId >= 500 && rangeId <= 531:\r\n        this.setState({icon: this.weatherIcon.Rain});\r\n        break;\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        this.setState({icon: this.weatherIcon.Snow});\r\n        break;\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        this.setState({icon: this.weatherIcon.Atmosphere});\r\n        break;\r\n      case rangeId === 800:\r\n        this.setState({icon: this.weatherIcon.Clear});\r\n        break;\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        this.setState({icon: this.weatherIcon.Clouds});\r\n        break;\r\n      default:\r\n        this.setState({Icon: this.weatherIcon.Clouds});\r\n    }\r\n    \r\n  }\r\n\r\n  getWeather = async (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    if(city && country){\r\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country},uk&appid=${API_key}`)\r\n\r\n      const response = await api_call.json();\r\n  \r\n      console.log(response);\r\n  \r\n      this.setState({\r\n        city: `${response.name}, ${response.sys.country}`,\r\n        celsius: this.calCalsius(response.main.temp),\r\n        temp_min: this.calCalsius(response.main.temp_min),\r\n        temp_max: this.calCalsius(response.main.temp_max),\r\n        description: response.weather[0].description,\r\n        error: false\r\n      });\r\n  \r\n      this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\r\n    }else{\r\n      this.setState({error:true})\r\n    }\r\n  };\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\r\n       <Weather \r\n          city={this.state.city} \r\n          country={this.state.country} \r\n          temp_celsius={this.state.celsius}\r\n          temp_min={this.state.temp_min} temp_max={this.state.temp_max} description={this.state.description}\r\n         weatherIcon={this.state.icon}\r\n       />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}